from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from services.user_service import (enable_user_reminders,
                                   save_user_reminder_time)
from utils.logger import logger


async def ask_time(message: types.Message):
    try:
        kb = ReplyKeyboardBuilder()
        for time in ["8.00", "13.00", "20.00", "22.00"]:
            kb.button(text=time)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à–∏–µ"
            " –ø—Ä–∏—è—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
            " –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    except Exception as e:
        logger.warning(
            f"–û—à–∏–±–∫–∞ –≤ ask_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )


async def set_time(message: types.Message):
    try:
        selected_time = message.text

        await save_user_reminder_time(message.from_user.id, selected_time)

        confirmation_text = (
            "–û—Ç–ª–∏—á–Ω–æ! üòä –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"
            " –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞ –∏–¥–µ—Ç –∞–∫—Ü–∏—è .\n"
            "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ ‚Äî —ç—Ç–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤,"
            " –Ω–æ –±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ñ–æ–Ω–¥–∞."
        )
        kb = ReplyKeyboardBuilder()
        kb.button(text="–ü–æ–∫–∞–∂–∏, –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
        kb.button(text="–•–æ—Ä–æ—à–æ, –∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        await message.answer(
            confirmation_text, reply_markup=kb.as_markup(resize_keyboard=True)
        )

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {selected_time}"
        )
    except Exception as e:
        logger.warning(
            f"–û—à–∏–±–∫–∞ –≤ set_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )


async def additional_response(message: types.Message):
    if message.text == "–•–æ—Ä–æ—à–æ, –∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        try:
            await enable_user_reminders(message.from_user.id)
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ üòä",
                reply_markup=ReplyKeyboardRemove(),
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            )
        except Exception as e:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}",
                exc_info=True,
            )


def register_handlers(dp: Dispatcher):
    try:
        dp.message.register(
            ask_time, lambda msg: msg.text == "–•–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
        dp.message.register(
            set_time, lambda msg: msg.text in ["8.00", "13.00", "20.00", "22.00"]
        )
        dp.message.register(
            additional_response, lambda msg: msg.text == "–•–æ—Ä–æ—à–æ, –∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ask_time –∏ set_time")
    except Exception as e:
        logger.warning(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ reminders.py: {e}", exc_info=True
        )
